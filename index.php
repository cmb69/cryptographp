<?php

/**
 * Front-end of Cryptographp_XH.
 *
 * Copyright (c) 2006-2007 Sylvain Brison
 * Copyright (c) 2011-2012 Christoph M. Becker (see license.txt)
 */


if (!defined('CMSIMPLE_XH_VERSION')) {
    header('HTTP/1.0 403 Forbidden');
    exit;
}


define('CRYPTOGRAPHP_VERSION', '1beta3');


/**
 * Returns the php configuration.
 *
 * @return string
 */
function cryptograph_config() {
    global $plugin_cf;

    $config = array(
	'crypt_width' => array('$cryptwidth', 'int'),
	'crypt_height' => array('$cryptheight', 'int'),
	'bg_rgb_red' => array('$bgR', 'int'),
	'bg_rgb_green' => array('$bgG', 'int'),
	'bg_rgb_blue' => array('$bgB', 'int'),
	'bg_clear' => array('$bgclear', 'bool'),
	'bg_image' => array('$bgimg', 'string'),
	'bg_frame' => array('$bgframe', 'bool'),
	'char_rgb_red' => array('$charR', 'int'),
	'char_rgb_green' => array('$charG', 'int'),
	'char_rgb_blue' => array('$charB', 'int'),
	'char_color_random' => array('$charcolorrnd', 'bool'),
	'char_color_random_level' => array('$charcolorrndlevel', 'int'),
	'char_clear' => array('$charclear', 'int'),
	'fonts' => array('$tfont', 'array'),
	'char_allowed' => array('$charel', 'string'),
	'crypt_easy' => array('$crypteasy', 'bool'),
	'char_allowed_consonants' => array('$charelc', 'string'),
	'char_allowed_vowels' => array('$charelv', 'string'),
	'char_count_min' => array('$charnbmin', 'int'),
	'char_count_max' => array('$charnbmax', 'int'),
	'char_space' => array('$charspace', 'int'),
	'char_size_min' => array('$charsizemin', 'int'),
	'char_size_max' => array('$charsizemax', 'int'),
	'char_angle_max' => array('$charanglemax', 'int'),
	'char_displace' => array('$charup', 'bool'),
	'crypt_gaussian_blur' => array('$cryptgaussianblur', 'bool'),
	'crypt_gray_scale' => array('$cryptgrayscal', 'bool'),
	'noise_pixel_min' => array('$noisepxmin', 'int'),
	'noise_pixel_max' => array('$noisepxmax', 'int'),
	'noise_line_min' => array('$noiselinemin', 'int'),
	'noise_line_max' => array('$noiselinemax', 'int'),
	'noise_circle_min' => array('$nbcirclemin', 'int'),
	'noise_circle_max' => array('$nbcirclemax', 'int'),
	'noise_color_char' => array('$noisecolorchar', 'int'),
	'noise_brush_size' => array('$brushsize', 'int'),
	'noise_above' => array('$noiseup', 'bool'),
	'crypt_format' => array('$cryptformat', 'string'),
	'crypt_use_timer' => array('$cryptusetimer', 'int'),
	'crypt_use_timer_error' => array('$cryptusertimererror', 'bool'),
	'crypt_expiration' => array('$cryptexpiration', 'int')
    );

    $pcf = $plugin_cf['cryptographp'];
    $res = '<?php'."\n\n"
	    .'// This file was automatically generated by Cryptographp_XH.'."\n\n";
    foreach ($config as $key => $option) {
	list($varname, $type) = $option;
	switch ($type) {
	    case 'int':
		$val = $pcf[$key];
		break;
	    case 'bool':
		$val = strtolower($pcf[$key] == 'yes') ? 'TRUE' : 'FALSE';
		break;
	    case 'string':
		$val = '\''.addcslashes($pcf[$key], '\'\\').'\'';
		break;
	    case 'array':
		$val = 'array(\''.implode('\', \'', explode(';', $pcf[$key])).'\')';
		break;
	}
	$res .= $varname.' = '.$val.';'."\n";
    }
    $res .= "\n".'?>'."\n";
    return $res;
}


/**
 * Updates the configuration, if necessary.
 *
 * @return void
 */
function cryptographp_update_config() {
    global $pth;

    $fn = $pth['folder']['plugins'].'cryptographp/config/cryptographp.cfg.php';
    if (!file_exists($fn) || filemtime($pth['folder']['plugins'].'cryptographp/config/config.php') > filemtime($fn)) {
	if (($fh = fopen($fn, 'w')) === FALSE || fwrite($fh, cryptograph_config()) === FALSE) {
	    e('cntsave', 'file', $fn);
	}
	if ($fh !== FALSE) {
	    fclose($fh);
	}
    }
}


/**
 * Update the configuration file.
 */
cryptographp_update_config();

?>
